[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "unidep"
description = "Unified Conda and Pip requirements management."
dynamic = ["version"]
authors = [{ name = "Bas Nijholt", email = "bas@nijho.lt" }]
dependencies = [
    "packaging",
    "ruamel.yaml",
    "typing_extensions; python_version < '3.8'",
]
requires-python = ">=3.7"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/basnijholt/unidep"

[project.optional-dependencies]
toml = ["tomli; python_version < '3.11'"]
conda-lock = ["conda-lock", "conda-package-handling"]
pip-compile = ["pip-tools"]
pytest = ["pytest", "GitPython"] # The pytest plugin
rich = ["rich-argparse"]
# Everything except 'test' and 'docs'
all = [
    "unidep[toml,conda-lock,pip-compile,pytest,rich]",
]
docs = [
    "myst-parser",
    "sphinx",
    "furo",
    "emoji",
    "sphinx-autodoc-typehints",
]
test = [
    "unidep[all]",
    "tomli_w",
    "pytest",
    "pre-commit",
    "coverage",
    "pytest-cov",
    "pytest-mock",
    "conda-package-handling",
    "rich",
]

[project.scripts]
unidep = "unidep:_cli.main"

[project.entry-points."setuptools.finalize_distribution_options"]
unidep = "unidep._setuptools_integration:_setuptools_finalizer"

[project.entry-points.hatch]
unidep = "unidep._hatch_integration"

[project.entry-points.pytest11]
affected = "unidep._pytest_plugin"

[tool.setuptools.packages.find]
include = ["unidep.*", "unidep"]

[tool.setuptools.dynamic]
version = { attr = "unidep._version.__version__" }

[tool.setuptools.package-data]
"unidep" = ["py.typed"]

[tool.pytest.ini_options]
addopts = """
    --cov=unidep
    --cov-report term
    --cov-report html
    --cov-report xml
    --cov-fail-under=95
    -W error
    -vvv
"""

[tool.coverage.run]
omit = ["unidep/_pytest_plugin.py", "unidep/_hatch_integration.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.black]
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py37"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "T20",     # flake8-print
    "ANN101",  # Missing type annotation for {name} in method
    "S101",    # Use of assert detected
    "S603",    # S603 `subprocess` call: check for execution of untrusted input
    "PD901",   # df is a bad variable name. Be kinder to your future self.
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "D402",    # First line should not be the function's signature
    "PLW0603", # Using the global statement to update `X` is discouraged
    "D401",    # First line of docstring should be in imperative mood
    "SLF001",  # Private member accessed
    "PLR0913", # Too many arguments in function definition
    "TD002",   # Missing author in TODO
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001", "D103", "E501", "PLR2004"]
"tests/test_examples.py" = ["E501"]
".github/*" = ["INP001"]
"example/*" = ["INP001", "D100"]
"docs/*" = ["INP001", "E501"]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.mypy]
python_version = "3.8"  # 3.7 is no longer supported by mypy

# Use bump-my-version, e.g., call `bump-my-version bump minor`
[tool.bumpversion]
current_version = "0.67.3"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "unidep/_version.py"
replace = '__version__ = "{new_version}"'
search = '__version__ = "{current_version}"'
